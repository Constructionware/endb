[
  {
    "comment": "/**\n\t * @param {string|EndbOptions} [options={}] The options for Endb.\n\t */",
    "meta": {
      "range": [
        1815,
        2371
      ],
      "filename": "index.js",
      "lineno": 54,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000127",
        "name": "Endb",
        "type": "MethodDefinition",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "params": [
      {
        "type": {
          "names": [
            "string",
            "EndbOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "The options for Endb.",
        "name": "options"
      }
    ],
    "name": "Endb",
    "longname": "Endb",
    "kind": "class",
    "scope": "global",
    "undocumented": true,
    "$longname": "Endb",
    "$kind": "constructor",
    "$docmaLink": "?api=endb#Endb"
  },
  {
    "comment": "/**\n\t * @param {string|EndbOptions} [options={}] The options for Endb.\n\t */",
    "meta": {
      "range": [
        1815,
        2371
      ],
      "filename": "index.js",
      "lineno": 54,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000127",
        "name": "Endb",
        "type": "MethodDefinition",
        "paramnames": [
          "options"
        ]
      }
    },
    "name": "Endb",
    "longname": "Endb",
    "kind": "class",
    "scope": "global",
    "classdesc": "Simple key-value storage with support for multiple backends.",
    "augments": [
      "EventEmitter"
    ],
    "params": [
      {
        "type": {
          "names": [
            "string",
            "EndbOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "The options for Endb.",
        "name": "options"
      }
    ],
    "$longname": "Endb",
    "$kind": "constructor",
    "$docmaLink": "?api=endb#Endb"
  },
  {
    "comment": "/**\n\t * Gets all the elements from the database.\n\t * @return {Promise<any[]>} All the elements in the database.\n\t */",
    "meta": {
      "range": [
        2492,
        3057
      ],
      "filename": "index.js",
      "lineno": 83,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000223",
        "name": "Endb#all",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Gets all the elements from the database.",
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Array.<any>>"
          ]
        },
        "description": "All the elements in the database."
      }
    ],
    "name": "all",
    "longname": "Endb#all",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "params": [],
    "async": true,
    "$longname": "Endb#all",
    "$kind": "method",
    "$docmaLink": "?api=endb#Endb#all"
  },
  {
    "comment": "/**\n\t * Clears all elements from the database.\n\t * @return {Promise<void>} Returns `undefined`.\n\t */",
    "meta": {
      "range": [
        3162,
        3236
      ],
      "filename": "index.js",
      "lineno": 113,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000322",
        "name": "Endb#clear",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Clears all elements from the database.",
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<void>"
          ]
        },
        "description": "Returns `undefined`."
      }
    ],
    "name": "clear",
    "longname": "Endb#clear",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "params": [],
    "async": true,
    "$longname": "Endb#clear",
    "$kind": "method",
    "$docmaLink": "?api=endb#Endb#clear"
  },
  {
    "comment": "/**\n\t * Deletes an element from the database by key.\n\t * @param {string} key The key(s) of the element to remove from the database.\n\t * @return {Promise<boolean>} `true` if the element is deleted successfully, otherwise `false`.\n\t * @example\n\t * await endb.set('foo', 'bar'); // true\n\t *\n\t * await endb.delete('foo'); // true\n\t */",
    "meta": {
      "range": [
        3571,
        4151
      ],
      "filename": "index.js",
      "lineno": 127,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000339",
        "name": "Endb#delete",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "path"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Deletes an element from the database by key.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key(s) of the element to remove from the database.",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        },
        "description": "`true` if the element is deleted successfully, otherwise `false`."
      }
    ],
    "examples": [
      "await endb.set('foo', 'bar'); // true\n\nawait endb.delete('foo'); // true"
    ],
    "name": "delete",
    "longname": "Endb#delete",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "async": true,
    "$longname": "Endb#delete",
    "$kind": "method",
    "$docmaLink": "?api=endb#Endb#delete"
  },
  {
    "comment": "/**\n\t * Ensures if an element exists in the database. If the element does not exist, sets the element to the database and returns the value.\n\t * @param {string} key The key of the element to ensure.\n\t * @param {*} value The value of the element to ensure.\n\t * @param {?string} [path]\n\t * @return {Promise<void|any>} The (default) value of the element.\n\t * @example\n\t * await endb.set('en', 'db');\n\t *\n\t * const data = await endb.ensure('foo', 'bar');\n\t * console.log(data); // 'bar'\n\t *\n\t * const data = await endb.ensure('en', 'db');\n\t * console.log(data); // 'db'\n\t */",
    "meta": {
      "range": [
        4726,
        5222
      ],
      "filename": "index.js",
      "lineno": 169,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000456",
        "name": "Endb#ensure",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "value",
          "path"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Ensures if an element exists in the database. If the element does not exist, sets the element to the database and returns the value.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element to ensure.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value of the element to ensure.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "nullable": true,
        "name": "path",
        "defaultvalue": null
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<(void|any)>"
          ]
        },
        "description": "The (default) value of the element."
      }
    ],
    "examples": [
      "await endb.set('en', 'db');\n\nconst data = await endb.ensure('foo', 'bar');\nconsole.log(data); // 'bar'\n\nconst data = await endb.ensure('en', 'db');\nconsole.log(data); // 'db'"
    ],
    "name": "ensure",
    "longname": "Endb#ensure",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "async": true,
    "$longname": "Endb#ensure",
    "$kind": "method",
    "$docmaLink": "?api=endb#Endb#ensure"
  },
  {
    "comment": "/**\n\t * Finds a single item where the given function returns a truthy value.\n\t * Behaves like {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find Array.prototype.find}.\n\t * The database elements is mapped by their `key`. If you want to find an element by key, you should use the `get` method instead.\n\t * See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get MDN} for more details.\n\t * @param {Function} fn The function to execute on each value in the element.\n\t * @param {*} [thisArg] Object to use as `this` inside callback.\n\t * @return {Promise<*|void>} The first element in the database that satisfies the provided testing function. Otherwise `undefined` is returned\n\t * @example\n\t * await endb.find(v => v === 'bar'); // { key: 'foo', value: 'bar' }\n\t * await endb.find(v => v.verified === true); // { key: 'profile', value: { ... } }\n\t * await endb.find(v => v.desc === 'desc'); // undefined\n\t */",
    "meta": {
      "range": [
        6337,
        6568
      ],
      "filename": "index.js",
      "lineno": 210,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000573",
        "name": "Endb#find",
        "type": "MethodDefinition",
        "paramnames": [
          "fn",
          "thisArg"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Finds a single item where the given function returns a truthy value.\nBehaves like {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find Array.prototype.find}.\nThe database elements is mapped by their `key`. If you want to find an element by key, you should use the `get` method instead.\nSee {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get MDN} for more details.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to execute on each value in the element.",
        "name": "fn"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "Object to use as `this` inside callback.",
        "name": "thisArg"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<(*|void)>"
          ]
        },
        "description": "The first element in the database that satisfies the provided testing function. Otherwise `undefined` is returned"
      }
    ],
    "examples": [
      "await endb.find(v => v === 'bar'); // { key: 'foo', value: 'bar' }\nawait endb.find(v => v.verified === true); // { key: 'profile', value: { ... } }\nawait endb.find(v => v.desc === 'desc'); // undefined"
    ],
    "name": "find",
    "longname": "Endb#find",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "async": true,
    "$longname": "Endb#find",
    "$kind": "method",
    "$docmaLink": "?api=endb#Endb#find"
  },
  {
    "comment": "/**\n\t * Gets the value of an element from the database by key.\n\t * @param {string} key The key of the element to get.\n\t * @param {?string} [path] The path of the property to get from the value.\n\t * @return {Promise<*|void>} The value of the element, or `undefined` if the element cannot be found in the database.\n\t * @example\n\t * const data = await endb.get('foo');\n\t * console.log(data); // 'bar'\n\t *\n\t * // Using path feature\n\t * await endb.get('profile', 'verified'); // false\n\t */",
    "meta": {
      "range": [
        7057,
        7418
      ],
      "filename": "index.js",
      "lineno": 235,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000620",
        "name": "Endb#get",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "path"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Gets the value of an element from the database by key.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element to get.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "nullable": true,
        "description": "The path of the property to get from the value.",
        "name": "path",
        "defaultvalue": null
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<(*|void)>"
          ]
        },
        "description": "The value of the element, or `undefined` if the element cannot be found in the database."
      }
    ],
    "examples": [
      "const data = await endb.get('foo');\nconsole.log(data); // 'bar'\n\n// Using path feature\nawait endb.get('profile', 'verified'); // false"
    ],
    "name": "get",
    "longname": "Endb#get",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "async": true,
    "$longname": "Endb#get",
    "$kind": "method",
    "$docmaLink": "?api=endb#Endb#get"
  },
  {
    "comment": "/**\n\t * Checks whether an element exists in the database or not.\n\t * @param {string} key The key of an element to check for.\n\t * @param {?string} [path] The path of the property to check.\n\t * @return {Promise<boolean>} `true` if the element exists in the database, otherwise `false`.\n\t */",
    "meta": {
      "range": [
        7711,
        7963
      ],
      "filename": "index.js",
      "lineno": 252,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000683",
        "name": "Endb#has",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "path"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Checks whether an element exists in the database or not.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of an element to check for.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "nullable": true,
        "description": "The path of the property to check.",
        "name": "path",
        "defaultvalue": null
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        },
        "description": "`true` if the element exists in the database, otherwise `false`."
      }
    ],
    "name": "has",
    "longname": "Endb#has",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "async": true,
    "$longname": "Endb#has",
    "$kind": "method",
    "$docmaLink": "?api=endb#Endb#has"
  },
  {
    "comment": "/**\n\t * Returns an array that contains the keys of each element.\n\t * @return {Promise<string[]>} An array that contains the keys of each element.\n\t */",
    "meta": {
      "range": [
        8118,
        8211
      ],
      "filename": "index.js",
      "lineno": 268,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000739",
        "name": "Endb#keys",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Returns an array that contains the keys of each element.",
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Array.<string>>"
          ]
        },
        "description": "An array that contains the keys of each element."
      }
    ],
    "name": "keys",
    "longname": "Endb#keys",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "params": [],
    "async": true,
    "$longname": "Endb#keys",
    "$kind": "method",
    "$docmaLink": "?api=endb#Endb#keys"
  },
  {
    "comment": "/**\n\t\t * The options the database was instantiated with.\n\t\t * @type {EndbOptions}\n\t\t */",
    "meta": {
      "range": [
        1947,
        2100
      ],
      "filename": "index.js",
      "lineno": 61,
      "columnno": 2,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000138",
        "name": "this.options",
        "type": "ObjectExpression",
        "value": "{\"namespace\":\"endb\",\"serialize\":\"\",\"deserialize\":\"\"}",
        "paramnames": []
      }
    },
    "description": "The options the database was instantiated with.",
    "type": {
      "names": [
        "EndbOptions"
      ]
    },
    "name": "options",
    "longname": "Endb#options",
    "kind": "member",
    "memberof": "Endb",
    "scope": "instance",
    "$longname": "Endb#options",
    "$kind": "property",
    "$docmaLink": "?api=endb#Endb#options"
  },
  {
    "comment": "/**\n\t * Sets an element to the database.\n\t * @param {string} key The key of the element to set to the database.\n\t * @param {*} value The value of the element to set to the database.\n\t * @param {?string} [path] The path of the property to set in the value.\n\t * @return {Promise<boolean>} Returns a boolean.\n\t * @example\n\t * await endb.set('foo', 'bar');\n\t * await endb.set('total', 400);\n\t * await endb.set('exists', false);\n\t * await endb.set('profile', {\n\t *   id: 1234567890,\n\t *   username: 'user',\n\t *   verified: true,\n\t *   nil: null\n\t * });\n\t * await endb.set('todo', [ 'Add a authentication system.', 'Refactor the generator' ]);\n\t *\n\t * await endb.set('profile', false, 'verified');\n\t * await endb.set('profile', 100, 'balance');\n\t */",
    "meta": {
      "range": [
        8959,
        9242
      ],
      "filename": "index.js",
      "lineno": 294,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000761",
        "name": "Endb#set",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "value",
          "path"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Sets an element to the database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element to set to the database.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value of the element to set to the database.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "nullable": true,
        "description": "The path of the property to set in the value.",
        "name": "path",
        "defaultvalue": null
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        },
        "description": "Returns a boolean."
      }
    ],
    "examples": [
      "await endb.set('foo', 'bar');\nawait endb.set('total', 400);\nawait endb.set('exists', false);\nawait endb.set('profile', {\n  id: 1234567890,\n  username: 'user',\n  verified: true,\n  nil: null\n});\nawait endb.set('todo', [ 'Add a authentication system.', 'Refactor the generator' ]);\n\nawait endb.set('profile', false, 'verified');\nawait endb.set('profile', 100, 'balance');"
    ],
    "name": "set",
    "longname": "Endb#set",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "async": true,
    "$longname": "Endb#set",
    "$kind": "method",
    "$docmaLink": "?api=endb#Endb#set"
  },
  {
    "comment": "/**\n\t * Returns an array that contains the values of each element.\n\t * @return {Promise<any[]>} Array that contains the values of each element.\n\t */",
    "meta": {
      "range": [
        9395,
        9494
      ],
      "filename": "index.js",
      "lineno": 310,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {
        "id": "astnode100000824",
        "name": "Endb#values",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Returns an array that contains the values of each element.",
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Array.<any>>"
          ]
        },
        "description": "Array that contains the values of each element."
      }
    ],
    "name": "values",
    "longname": "Endb#values",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "params": [],
    "async": true,
    "$longname": "Endb#values",
    "$kind": "method",
    "$docmaLink": "?api=endb#Endb#values"
  },
  {
    "comment": "/**\n\t * The options for Endb.\n\t * @typedef {Object} EndbOptions\n\t * @property {string} [uri] The connection URI for the driver.\n\t * @property {string} [namespace='endb'] The namespace of the database.\n\t * @property {string} [adapter] The storage adapter or driver to use.\n\t * @property {*} [store=Map]\n\t * @property {Function} [serialize=stringify] Data serialization function.\n\t * @property {Function} [deserialize=parse] Data deserialization function.\n\t * @property {string} [collection='endb'] The name of the collection. Only works for MongoDB.\n\t * @property {string} [table='endb'] The name of the table. Only works for SQL-based databases.\n\t * @property {number} [keySize=255] The maximum size of the keys of elements. Only works for SQL-based databases.\n\t */",
    "meta": {
      "filename": "index.js",
      "lineno": 37,
      "columnno": 1,
      "path": "/home/runner/work/endb/endb/src",
      "code": {}
    },
    "description": "The options for Endb.",
    "kind": "typedef",
    "name": "EndbOptions",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The connection URI for the driver.",
        "name": "uri"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'endb'",
        "description": "The namespace of the database.",
        "name": "namespace"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The storage adapter or driver to use.",
        "name": "adapter"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "defaultvalue": "Map",
        "name": "store"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "stringify",
        "description": "Data serialization function.",
        "name": "serialize"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "parse",
        "description": "Data deserialization function.",
        "name": "deserialize"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'endb'",
        "description": "The name of the collection. Only works for MongoDB.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'endb'",
        "description": "The name of the table. Only works for SQL-based databases.",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 255,
        "description": "The maximum size of the keys of elements. Only works for SQL-based databases.",
        "name": "keySize"
      }
    ],
    "longname": "EndbOptions",
    "scope": "global",
    "$longname": "EndbOptions",
    "$kind": "typedef",
    "$docmaLink": "?api=endb#EndbOptions"
  }
]